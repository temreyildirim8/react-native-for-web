{"version":3,"sources":["routes/paths.js","screens/Dashboard/Dashboard.js","screens/Results/Results.js","routes/Routes.js","store/generics/utility.js","store/reducers/dashboardReducer.js","store/generics/actionTypes.js","App.js","index.js"],"names":["instructions","Platform","select","ios","android","Dashboard","View","style","styles","container","Text","welcome","Component","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin","color","marginBottom","Results","Routes","path","paths","component","updateObject","oldObject","initialState","updatedValues","Object","assign","INITIAL_STATE","loading","availabilityResponse","selectedJourney","JSON","parse","sessionStorage","getItem","errorCode","errorMessage","dashboardReducer","state","action","type","journeyObject","stringify","setItem","rootReducer","combineReducers","dashboard","store","createStore","composeWithDevTools","applyMiddleware","next","console","log","result","getState","thunk","App","ReactDom","render","document","getElementById"],"mappings":"8PACe,EAEA,aAFA,EAGF,W,uBCOPA,EAAeC,IAASC,OAAO,CACnCC,IAAK,sDACLC,QACE,sFAIiBC,E,iLAEjB,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,SAApB,4BACA,kBAACD,EAAA,EAAD,CAAMH,MAAOC,EAAOR,cAApB,+BACA,kBAACU,EAAA,EAAD,CAAMH,MAAOC,EAAOR,cAAeA,Q,GANNY,aAYjCJ,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,WAEnBP,QAAS,CACPQ,SAAU,GACVC,UAAW,SACXC,OAAQ,IAEVrB,aAAc,CACZoB,UAAW,SACXE,MAAO,UACPC,aAAc,KClCZvB,EAAeC,IAASC,OAAO,CACnCC,IAAK,sDACLC,QACE,sFAIiBoB,E,iLAEjB,OACI,kBAAClB,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,SAApB,sBACA,kBAACD,EAAA,EAAD,CAAMH,MAAOC,EAAOR,cAApB,sBACA,kBAACU,EAAA,EAAD,CAAMH,MAAOC,EAAOR,cAAeA,Q,GANRY,aAY/BJ,EAASK,IAAWC,OAAO,CAC/BL,UAAW,CACTM,KAAM,EACNC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,WAEnBP,QAAS,CACPQ,SAAU,GACVC,UAAW,SACXC,OAAQ,IAEVrB,aAAc,CACZoB,UAAW,SACXE,MAAO,UACPC,aAAc,KCvBHE,EATA,kBACX,kBAAC,IAAD,KACE,kBAACnB,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOoB,KAAMC,EAAiBC,UAAWvB,IACzC,kBAAC,IAAD,CAAOqB,KAAMC,EAAeC,UAAWJ,OCjBlCK,EAAe,SAACC,EAAWC,EAAcC,GAClD,OAAOC,OAAOC,OAAO,GAAIJ,EAAWC,EAAcC,ICEhDG,EAAgB,CACpBC,SAAS,EACTC,qBAAsB,GACtBC,gBAAiBC,KAAKC,MAAMC,eAAeC,QAAQ,oBACnDC,UAAW,GACXC,aAAc,IAiCDC,EA9BU,WAAoC,IAAnCC,EAAkC,uDAA1BX,EAAeY,EAAW,uCAC1D,OAAQA,EAAOC,MACb,ICZwB,eDatB,OAAOnB,EACLiB,EACA,GACA,CACEV,SAAS,IAGf,ICrBuB,cDsBrB,OAAOP,EAAaiB,EAAOX,EAAe,CACxCE,qBAAsBU,EAAOV,uBAEjC,ICvB4B,mBDwB1B,OAAOR,EAAaiB,EAAOX,EAAe,CACxCQ,UAAWI,EAAOJ,UAClBC,aAAcG,EAAOH,eAEzB,ICzBwB,eD0BtB,IAAMK,EAAgBV,KAAKW,UAAUH,EAAOT,iBAE5C,OADAG,eAAeU,QAAQ,kBAAmBF,GACnCpB,EAAaiB,EAAOX,EAAe,CACxCG,gBAAiBS,EAAOT,kBAE5B,QACE,OAAOQ,IEnBPM,EAAcC,0BAAgB,CAClCC,UAAWT,IAgBPU,EAAQC,sBACZJ,EACAK,8BAAoBC,2BAdP,SAAAZ,GACb,OAAO,SAAAa,GACL,OAAO,SAAAZ,GACLa,QAAQC,IAAI,yBAA0Bd,GACtC,IAAMe,EAASH,EAAKZ,GAEpB,OADAa,QAAQC,IAAI,0BAA2Bf,EAAMiB,YACtCD,MAQiCE,OAIzBC,E,iLAEjB,OACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,W,GAJyB3C,aCrCjCsD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5d772446.chunk.js","sourcesContent":["\nexport default {\n    DEFAULT: '/',\n    DASHBOARD: '/dashboard',\n    RESULTS: '/results'\n}","/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\n\nconst instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' + 'Cmd+D or shake for dev menu',\n  android:\n    'Double tap R on your keyboard to reload,\\n' +\n    'Shake or press menu button for dev menu',\n});\n\nexport default class Dashboard extends Component {\n  render() {\n    return (\n        <View style={styles.container}>\n          <Text style={styles.welcome}>Welcome to React Native!</Text>\n          <Text style={styles.instructions}>To get started, edit App.js</Text>\n          <Text style={styles.instructions}>{instructions}</Text>\n        </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n","/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\n\nconst instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' + 'Cmd+D or shake for dev menu',\n  android:\n    'Double tap R on your keyboard to reload,\\n' +\n    'Shake or press menu button for dev menu',\n});\n\nexport default class Results extends Component {\n  render() {\n    return (\n        <View style={styles.container}>\n          <Text style={styles.welcome}>It is results page</Text>\n          <Text style={styles.instructions}>It is results page</Text>\n          <Text style={styles.instructions}>{instructions}</Text>\n        </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport {\n  MemoryRouter,\n  Route,\n  Link\n} from \"react-router\";\n\nimport paths from './paths';\n\nimport Dashboard from '../screens/Dashboard/Dashboard';\nimport Results from '../screens/Results/Results';\n\nconst Routes = () => (\n    <MemoryRouter>\n      <View>\n        <Route path={paths.DASHBOARD} component={Dashboard} />\n        <Route path={paths.RESULTS} component={Results} />\n      </View>\n    </MemoryRouter>\n);\n\nexport default Routes;","export const updateObject = (oldObject, initialState, updatedValues) => {\n    return Object.assign({}, oldObject, initialState, updatedValues);\n  };\n  ","import * as ActionTypes from \"../generics/actionTypes\";\nimport { updateObject } from \"../generics/utility\";\n\nconst INITIAL_STATE = {\n  loading: false,\n  availabilityResponse: {},\n  selectedJourney: JSON.parse(sessionStorage.getItem(\"selectedJourney\")),\n  errorCode: \"\",\n  errorMessage: \"\"\n};\n\nconst dashboardReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.CLOSE_DRAWER:\n      return updateObject(\n        state,\n        {},\n        {\n          loading: true\n        }\n      );\n    case ActionTypes.OPEN_DRAWER:\n      return updateObject(state, INITIAL_STATE, {\n        availabilityResponse: action.availabilityResponse\n      });\n    case ActionTypes.LOGIN_CALL_START:\n      return updateObject(state, INITIAL_STATE, {\n        errorCode: action.errorCode,\n        errorMessage: action.errorMessage\n      });\n    case ActionTypes.LOGIN_FAILED:\n      const journeyObject = JSON.stringify(action.selectedJourney);\n      sessionStorage.setItem(\"selectedJourney\", journeyObject);\n      return updateObject(state, INITIAL_STATE, {\n        selectedJourney: action.selectedJourney\n      });\n    default:\n      return state;\n  }\n};\n\nexport default dashboardReducer;\n","export const OPEN_DRAWER = \"OPEN_DRAWER\";\nexport const CLOSE_DRAWER = \"CLOSE_DRAWER\";\nexport const LOGIN_CALL_START = \"LOGIN_CALL_START\";\nexport const LOGIN_NETWORK_ERROR = \"LOGIN_NETWORK_ERROR\";\nexport const LOGIN_SUCESSFULL = \"LOGIN_SUCESSFULL\";\nexport const LOGIN_FAILED = \"LOGIN_FAILED\";\nexport const LOGOUT_CALL_START = \"LOGOUT_CALL_START\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";","/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\nimport Routes from '../src/routes/Routes';\nimport dashboardReducer from '../src/store/reducers/dashboardReducer'\n\n// Combine all reducers\nconst rootReducer = combineReducers({\n  dashboard: dashboardReducer\n});\n\n// Logger for dispatching\nconst logger = state => {\n  return next => {\n    return action => {\n      console.log(\"Middleware dispatching\", action);\n      const result = next(action);\n      console.log(\"[MiddleWare next state]\", state.getState());\n      return result;\n    };\n  };\n};\n\n// Store instance\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger, thunk))\n);\n\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Routes />\n      </Provider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}